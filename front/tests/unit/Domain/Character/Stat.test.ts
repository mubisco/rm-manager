import { Stat } from '@/Domain/Character/Stat'
import { StatCode } from '@/Domain/Character/StatCode'
import { StatValueError } from '@/Domain/Character/StatValueError'
import { describe, test, expect } from 'vitest'

describe('Testing Stat', () => {
  test('Should be of proper class', () => {
    const stat = Stat.fromCode(StatCode.STRENGTH)
    expect(stat).toBeInstanceOf(Stat)
  })
  test('Should return proper values', () => {
    const stat = Stat.fromCode(StatCode.STRENGTH)
    expect(stat.rawValue()).toBe(0)
    expect(stat.code()).toBe('ST')
  })
  test('Should be initialized with rawValue', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 100)
    expect(stat.code()).toBe('CO')
    expect(stat.rawValue()).toBe(100)
    expect(stat.bonus()).toBe(10)
    expect(stat.developmentPoints()).toBe(10)
  })
  test('Should throw error if value less than zero', () => {
    expect(() => { Stat.fromValue(StatCode.PRESENCE, -1) }).toThrowError(StatValueError)
  })
  test('Should throw error if value above 105', () => {
    expect(() => { Stat.fromValue(StatCode.PRESENCE, 106) }).toThrowError(StatValueError)
  })
  test('Should increase value', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 100)
    stat.increase(5)
    expect(stat.rawValue()).toBe(105)
  })
  test('Should throw error if increase raises stat above limit', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 105)
    expect(() => { stat.increase(1) }).toThrowError(StatValueError)
  })
  test('Should throw error if increase called with negative value', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 105)
    expect(() => { stat.increase(-1) }).toThrowError(StatValueError)
  })
  test('Should decrease value', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 100)
    stat.reduce(5)
    expect(stat.rawValue()).toBe(95)
  })
  test('Should throw error if reduce lowers stat below limit', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 0)
    expect(() => { stat.reduce(1) }).toThrowError(StatValueError)
  })
  test('Should throw error if reuce called with negative value', () => {
    const stat = Stat.fromValue(StatCode.CONSTITUTION, 100)
    expect(() => { stat.reduce(-1) }).toThrowError(StatValueError)
  })
  test('Should return proper development points values', () => {
    let stat = Stat.fromValue(StatCode.STRENGTH, 10)
    expect(stat.developmentPoints()).toBe(0.25)
    stat.increase(1)
    expect(stat.developmentPoints()).toBe(0.5)
    stat.increase(20)
    expect(stat.developmentPoints()).toBe(0.75)
    stat.increase(20)
    expect(stat.developmentPoints()).toBe(1)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(2)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(3)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(4)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(5)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(6)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(7)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(8)
    stat.increase(5)
    expect(stat.developmentPoints()).toBe(9)
    stat = Stat.fromValue(StatCode.STRENGTH, 100)
    expect(stat.developmentPoints()).toBe(10)
    stat = Stat.fromValue(StatCode.STRENGTH, 101)
    expect(stat.developmentPoints()).toBe(11)
    stat = Stat.fromValue(StatCode.STRENGTH, 102)
    expect(stat.developmentPoints()).toBe(12)
    stat = Stat.fromValue(StatCode.STRENGTH, 103)
    expect(stat.developmentPoints()).toBe(13)
    stat = Stat.fromValue(StatCode.STRENGTH, 104)
    expect(stat.developmentPoints()).toBe(14)
    stat = Stat.fromValue(StatCode.STRENGTH, 105)
    expect(stat.developmentPoints()).toBe(15)
  })
  test('SHould return proper bonus value', () => {
    let stat = Stat.fromValue(StatCode.STRENGTH, 5)
    stat = Stat.fromValue(StatCode.STRENGTH, 6)
    expect(stat.bonus()).toBe(-16)
    stat = Stat.fromValue(StatCode.STRENGTH, 11)
    expect(stat.bonus()).toBe(-14)
    stat = Stat.fromValue(StatCode.STRENGTH, 16)
    expect(stat.bonus()).toBe(-12)
    stat = Stat.fromValue(StatCode.STRENGTH, 21)
    expect(stat.bonus()).toBe(-10)
    stat = Stat.fromValue(StatCode.STRENGTH, 26)
    expect(stat.bonus()).toBe(-8)
    stat = Stat.fromValue(StatCode.STRENGTH, 31)
    expect(stat.bonus()).toBe(-6)
    stat = Stat.fromValue(StatCode.STRENGTH, 36)
    expect(stat.bonus()).toBe(-4)
    stat = Stat.fromValue(StatCode.STRENGTH, 41)
    expect(stat.bonus()).toBe(-2)
    stat = Stat.fromValue(StatCode.STRENGTH, 46)
    expect(stat.bonus()).toBe(0)
    stat = Stat.fromValue(StatCode.STRENGTH, 51)
    expect(stat.bonus()).toBe(1)
    stat = Stat.fromValue(StatCode.STRENGTH, 56)
    expect(stat.bonus()).toBe(2)
    stat = Stat.fromValue(StatCode.STRENGTH, 61)
    expect(stat.bonus()).toBe(3)
    stat = Stat.fromValue(StatCode.STRENGTH, 66)
    expect(stat.bonus()).toBe(4)
    stat = Stat.fromValue(StatCode.STRENGTH, 71)
    expect(stat.bonus()).toBe(5)
    stat = Stat.fromValue(StatCode.STRENGTH, 76)
    expect(stat.bonus()).toBe(6)
    stat = Stat.fromValue(StatCode.STRENGTH, 81)
    expect(stat.bonus()).toBe(7)
    stat = Stat.fromValue(StatCode.STRENGTH, 86)
    expect(stat.bonus()).toBe(8)
    stat = Stat.fromValue(StatCode.STRENGTH, 91)
    expect(stat.bonus()).toBe(9)
    stat = Stat.fromValue(StatCode.STRENGTH, 96)
    expect(stat.bonus()).toBe(10)
    stat = Stat.fromValue(StatCode.STRENGTH, 101)
    expect(stat.bonus()).toBe(11)
    stat = Stat.fromValue(StatCode.STRENGTH, 102)
    expect(stat.bonus()).toBe(12)
    stat = Stat.fromValue(StatCode.STRENGTH, 103)
    expect(stat.bonus()).toBe(13)
    stat = Stat.fromValue(StatCode.STRENGTH, 104)
    expect(stat.bonus()).toBe(14)
    stat = Stat.fromValue(StatCode.STRENGTH, 105)
    expect(stat.bonus()).toBe(15)
  })
})
